@{
    ViewBag.Title = "Calendar";
}

@section AddToTextCss {

    .fc-event {
    cursor: pointer;
    }

    /* Get rid of margin in calendar header */
    .fc-header-title > h2 {
    margin-bottom: 0;
    }

    #interview-list {
    max-height: 300px;
    overflow: auto;
    }

    .well-small {
    width: inherit;
    }

    .scheduled {
    color: #DB2C38;
    }

    .entered {
    color: #CCBF33;
    }

    .edited {
    color: #17599D;
    }

    .final {
    color: #39C72A;
    }

    .editing {
    color: #7C1296;
    }

    .scheduled-bg {
    background-color: #DB2C38;
    color: white;
    }

    .entered-bg {
    background-color: #CCBF33;
    color: white;
    }

    .edited-bg {
    background-color: #17599D;
    color: white;
    }

    .final-bg {
    background-color: #39C72A;
    color: white;
    }

    .editing-bg {
    background-color: #7C1296;
    color: white;
    }

    /* Hides top of dialog */
    .no-close .ui-dialog-titlebar-close {display: none; }

}

<div class="row-fluid">
    <div class="span8">
        <div id="calendar">
            <!--Full Calendar gets entered here-->
        </div>
    </div>
    <div class="span4" id="toolbar">
        <!-- Color code -->
        <div class="text-center">
            <b>Interview Color Code</b>
        </div>
        <table style="width: 100%; table-layout: fixed;">
            <tbody>
                <tr>
                    <td class="scheduled-bg">Scheduled</td>
                    <td class="entered-bg">Entered</td>
                    <td class="edited-bg">Edited</td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%; table-layout: fixed;">
            <tbody>
                <tr>
                    <td class="final-bg">Final</td>
                    <td class="editing-bg">Being Edited</td>
                </tr>
            </tbody>
        </table>
        <!-- Interview information panel, only show for interviewer -->
        @if (ViewBag.user.UserGroup == "INTER")
        {
            <div class="panel panel-primary hide" id="interview-info">
                <div class="panel-heading">
                    <h4 class="panel-title">Interview Info</h4>
                </div>
                <div class="panel-body">
                    <b>Date: </b><span id="interview-info-date"></span><br />
                    <b>Time: </b><span id="interview-info-start"></span> - <span id="interview-info-end"></span><br />
                    <b>Location: </b><span id="interview-info-location"></span><br />
                    <b>Interviewer: </b><span id="interview-info-interviewers"></span><br />
                    <b>Candidate: </b><span id="interview-info-candidates"></span><br />
                    <p class="text-center">
                        <!-- <a type="button" class="button" href=""><i class="fa fa-edit"></i> Edit</a> -->
                        <a type="button" class="button" href="#" id="edit-interview"><i class="fa fa-edit"></i> Edit</a>
                        <button type="button" id="hide-interview-info" class="btn-ignore btn-danger">Close Info</button>
                    </p>
                </div>
            </div>
        }
        else
        {
            <div class="panel panel-primary" id="interview-list">
                <div class="panel-heading">
                    <h4 class="panel-title">Interviews</h4>
                </div>
                <div class="panel-body">
                </div>
            </div>
        }
        <!-- Create interview button -->
        <!-- Only coord and admins can create -->
        @if (ViewBag.user.UserGroup == "COORD" || ViewBag.user.UserGroup == "ADMIN")
        {
            <p class="text-center"><button id="createInterview"><i class="fa fa-plus"></i> Create Interview</button></p>
        <!-- Create new interview collapsable panel-->
            <div class="panel panel-primary" style="display:none" id="showCreate">
                <div class="panel-heading">
                    <h4 class="panel-title">Create New Interview</h4>
                </div>
                <div class="panel-body">
                    <form class="form-horizontal" id="interview-form">
                        <div class="form-group">
                            <label for="date-holder" class="control-label span3">Date</label>
                            <div class="span7">
                                <input type="text" class="form-control span11" id="date-holder" />
                                <input type="hidden" name="Date" id="Date" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="start-holder" class="control-label span3">Start Time</label>
                            <div class="span3">
                                <select id="start-holder">
                                    @for (var i = ViewBag.startTime; i < ViewBag.endTime; i++)
                                    {
                                        <option value="@i:00">@i:00</option>
                                        <option value="@i:15">@i:15</option>
                                        <option value="@i:30">@i:30</option>
                                        <option value="@i:45">@i:45</option>
                                    }
                                </select>
                                <input type="hidden" class="form-control span11" name="StartTime" id="StartTime" />
                            </div>
                            <label for="end-holder" class="control-label span3">End Time</label>
                            <div class="span3">
                                <select id="end-holder">
                                    @for (var i = ViewBag.startTime; i <= ViewBag.endTime; i++)
                                    {
                                        <option value="@i:00">@i:00</option>
                                        <option value="@i:15">@i:15</option>
                                        <option value="@i:30">@i:30</option>
                                        <option value="@i:45">@i:45</option>
                                    }
                                </select>
                                <input type="hidden" class="form-control span11" name="EndTime" id="EndTime" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="BioDataID" class="control-label span3">Candidate</label>
                            <div class="span7">
                                <select class="form-control span11" name="BioDataID" id="BioDataID">
                                    <option value=""></option>
                                    @foreach (var c in ViewBag.candidates)
                                    {
                                        <option value="@c.ID" data-alt="@c.SSN">@c.FName @c.LName (@c.SSN)</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="checkbox text-center">
                            <label for="NR">
                                <input id="NR" name="NR" type="checkbox" />NR
                            </label>
                            <label for="INST">
                                <input id="INST" name="INST" type="checkbox" />INST
                            </label>
                            <label for="NPS">
                                <input id="NPS" name="NPS" type="checkbox" />NPS
                            </label>
                            <label for="PXO">
                                <input id="PXO" name="PXO" type="checkbox" />PXO
                            </label>
                            <label for="EDO">
                                <input id="EDO" name="EDO" type="checkbox" />EDO
                            </label>
                        </div>
                        <div class="checkbox text-center">
                            <label for="ENLTECH">
                                <input id="ENLTECH" name="ENLTECH" type="checkbox" />ENLTECH
                            </label>
                            <label for="NR1">
                                <input id="NR1" name="NR1" type="checkbox" />NR1
                            </label>
                            <label for="SUPPLY">
                                <input id="SUPPLY" name="SUPPLY" type="checkbox" />SUPPLY
                            </label>
                        </div>
                        <div class="checkbox text-center">
                            <label for="EOOW">
                                <input id="EOOW" name="EOOW" type="checkbox" />EOOW
                            </label>
                            <label for="DOE">
                                <input id="DOE" name="INST" type="checkbox" />DOE
                            </label>
                        </div>
                        <div class="text-center">
                            <button type="button" id="submit-quals">Filter by Quals</button>
                        </div>
                        <hr />
                        <div class="form-group">
                            <label for="InterviewerID" class="control-label span3">Interviewer</label>
                            <div class="span7">
                                <select class="form-control span11" name="InterviewerID" id="InterviewerID">
                                    <option value=""></option>
                                    @foreach (var i in ViewBag.interviewers)
                                    {
                                        <option value="@i.UserID">@i.LoginID</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="Location" class="control-label span3">Location</label>
                            <div class="span7">
                                <input type="text" class="form-control span11" name="Location" id="Location" />
                            </div>
                        </div>
                        <input type="hidden" name="Status" id="Status" value="@Status.Scheduled.ToString()" />
                        <input type="hidden" name="Duration" id="Duration" value="" />
                    </form>
                    <div class="row-fluid">
                        <div id="interview-errors" class="alert hide alert-error span10 offset1">
                            <p></p>
                        </div>
                    </div>
                    <p class="text-center">
                        <button type="button" class="btn-ignore btn-success" id="schedule-interview"><i class="fa fa-check"></i> Schedule</button>
                        <button type="button" class="btn-ignore btn-danger" id="cancelInterview"><i class="fa fa-times-circle"></i> Cancel</button>
                    </p>
                </div>
            </div>
        }
    </div>
</div>
<div id="dialog" title="Fetching Interviews">
    <p>Fetching Interviews...</p>
</div>
<div id="dialog-confirm" title="">
    <p></p>
</div>

@section AddToScripts {
    <script type="text/javascript">

        var quals = [
                "NR", "INST", "NPS", "PXO", "EDO", "ENLTECH",
                "NR1", "SUPPLY", "EOOW", "DOE"
        ];

        var eventColors = {
            "none": "#000",
            "scheduled": "#DB2C38", // red
            "entered": "#CCBF33", // yellow
            "edited": "#17599D", // blue
            "final": "#39C72A", // green
            "editing": "#7C1296" // purple
        };

        var interviewMapper = {};

        /**
        * Function to show and set data/callbacks for a confirmation dialog
        * Params:
        *  title - (String) Title for the new dialog
        *  message - (String) Message for the new dialog
        *  okOnly - (Boolean) T/F if the dialog should just have an OK button, otherwise will have OK and cancel
        *  okFunction - (Function) Callback function on OK press
        */
        function showDialog(title, message, okOnly, okFunction) {
            $("#dialog-confirm > p").html(message);
            var buttons;
            if (okOnly) {
                buttons = {
                    Ok: function () {
                        okFunction();
                        //$(this).dialog("close");
                    }
                }
            } else {
                buttons = {
                    Ok: function () {
                        okFunction();
                        //$(this).dialog("close");
                    },
                    Close: function () {
                        $(this).dialog("close");
                    }
                }
            }

            $("#dialog-confirm").dialog({
                title: title,
                modal: true,
                buttons: buttons
            });
            $("#dialog-confirm").dialog("open");
        }

        function updateCalendar(view, updateList) {
            // Show dialog to prevent any further clicking
            $("#dialog").dialog("open");
            var start = view.start;
            var end = view.end;
            // Reset interviewMapper
            interviewMapper = {};
            //Fetch events from API
            var append = "";
            @if (ViewBag.user.UserGroup == "INTER")
            {
                // If interviewer, only get interviews they're assigned to
                <text>append = " and InterviewerID eq " + @ViewBag.user.UserID + "";</text>
            }
            var obj = {
                "$filter": "Date gt datetime'" + start.toISOString() + "' and Date lt datetime'" +
                    end.toISOString() + "'" + append,
                "$orderby" : "StartTime"
            };
            $.ajax({
                url: baseURL + "/api/Interview/GetBy?" + $.param(obj),
                type: "Get",
                success: function (data) {
                    //Remove all events
                    $("#calendar").fullCalendar("removeEvents");
                    if (updateList) {
                        // Clear list out
                        $("#interview-list .panel-body").empty();
                        if (data.length == 0) {
                            $("#interview-list .panel-body").append("<p class='text-center'>No interviews for this time period</p>");
                        }
                    }
                    for (var i = 0; i < data.length; i++) {
                        var interview = data[i];
                        @if (ViewBag.user.UserGroup == "INTER")
                        {
                        <text>
                        var event = {
                            id: interview.InterviewID,
                            //TODO: change this title to something else?
                            title: interview.BioData.FName + " " + interview.BioData.LName,
                            allDay: false,
                            start: interview.StartTime,
                            end: interview.EndTime,
                            backgroundColor: eventColors[interview.Status.toLowerCase()],
                            borderColor: eventColors[interview.Status.toLowerCase()]
                        };
                        if (interview.CurrentlyEditingID != null) {
                            // Set colors to black
                            event.backgroundColor = "editing";
                            event.borderColor = "editing";
                        }
                        $("#calendar").fullCalendar("renderEvent", event);
                        </text>
                        }
                        else
                        {
                        <text>
                        var date = new Date(interview.Date);
                        date.setHours(12);
                        var dateString = date.toISOString();
                        var source = interview.BioData.Sources.SourcesValue;
                        if (dateString in interviewMapper) {
                            var sourceMap = interviewMapper[dateString];
                            if (source in sourceMap) {
                                interviewMapper[dateString][source].push(interview);
                            } else {
                                interviewMapper[dateString][source] = [];
                                interviewMapper[dateString][source].push(interview);
                            }
                        } else {
                            interviewMapper[dateString] = {};
                            interviewMapper[dateString][source] = [];
                            interviewMapper[dateString][source].push(interview);
                        }
                        </text>
                        }
                        if (updateList) {
                            // Populate interview-list
                            var date = moment(interview.Date);
                            var startTime = moment(interview.StartTime);
                            var endTime = moment(interview.EndTime);
                            var link = "@Url.Action("Edit", "Interviews", new { id = "__id__" })";
                            link = link.replace("__id__", interview.InterviewID);
                            $("#edit-interview").attr("href", link);
                            var statusClass = interview.Status.toLowerCase();
                            var status = interview.Status;
                            if (interview.CurrentlyEditingID != null) {
                                statusClass = "editing";
                                status = "Being Edited"
                            }
                            $("#interview-list .panel-body").append(
                                '<div class="well well-small row-fluid">' +
                                    '<div class="span10">' +
                                        '<div>Candidate: ' + interview.BioData.FName + ' ' + interview.BioData.LName + '</div>' +
                                        '<div>Interviewer: ' + interview.InterviewerUser.LoginID + '</div>' +
                                        '<div>Date/Time: ' + date.format("M/D/YYYY") + ' ' + startTime.format("HH:mm") + '-' + endTime.format("HH:mm") + '</div>' +
                                        '<div>Location: ' + interview.Location + '</div>' +
                                        '<div>Status: <span class="' + statusClass + '">' + status + '</span></div>' +
                                        '<div>Type: ' + interview.BioData.Sources.SourcesValue + '</div>' +
                                    '</div>' +
                                    '<div class="span2 text-center">' +
                                        '<a class="button" type="button" href="' + link + '"><i class="fa fa-edit"></i></a>' +
                                        '<button type="button" class="delete-interview btn-ignore btn-danger" data-id="' + interview.InterviewID + '"><i class="fa fa-times-circle"></i></button>' +
                                    '</div>' +
                                '</div>'
                            );
                        }
                    }
                    if (updateList) {
                        // Re-init buttons in interview-list
                        $("#interview-list .panel-body a.button").button();
                    }
                    @if (ViewBag.user.UserGroup != "INTER")
                    {
                    <text>
                    for (var date in interviewMapper) {
                        for (var source in interviewMapper[date]) {
                            var event = {
                                id: date + "," + source,
                                title: source + " (" + interviewMapper[date][source].length + ")",
                                allDay: true,
                                start: date,
                                backgroundColor: eventColors["none"],
                                borderColor: eventColors["none"]
                            };
                            $("#calendar").fullCalendar("renderEvent", event);
                        }
                    }
                    </text>
                    }
                    $("#dialog").dialog("close");
                },
                error: function (data) {
                }
            });
        }

        function updateInterviewers() {
            var filterStr = "";
            for (var i = 0; i < quals.length; i++) {
                var box = $("#" + quals[i]);
                if ($(box).is(":checked")) {
                    if (i != 0 && filterStr != "") {
                        filterStr += " and ";
                    }
                    filterStr += quals[i] + " eq true"
                }
            }
            var url;
            if (filterStr == "") {
                url = baseURL + "/api/User/GetAll/";
            } else {
                // GetBy interviewers
                var obj = {
                    "$filter": filterStr
                };
                url = baseURL + "/api/User/GetBy?" + $.param(obj);
            }
            $.ajax({
                url: url,
                type: "Get",
                success: function (data) {
                    // Clear out current select
                    $("#InterviewerID").select2("destroy");
                    $("#InterviewerID").empty();
                    // Add empty select
                    $("#InterviewerID").append("<option value=''></option>")
                    for (var i = 0; i < data.length; i++) {
                        var interviewer = data[i];
                        $("#InterviewerID").append("<option value='" + interviewer.UserID + "'>" +
                            interviewer.LoginID + "</option>");
                    }
                    // Re-init select2
                    $("#InterviewerID").select2({
                        placeholder: "Choose Interviewer",
                        dropdownCssClass: "expand"
                    });
                },
                error: function (data) {
                }
            });
        }

        function clearForm() {
            $("#date-holder").val("");
            $("#Location").val("");
            $("#Duration").val("");
            $("#start-holder").val("");
            $("#end-holder").val("");
            $("#InterviewerID").val("");
            $("#BioDataID").val("");
            // Clear quals
            for (var i = 0; i < quals.length; i++) {
                $("#" + quals[i]).prop("checked", false);
            }
            // Hide errors
            $("#interview-errors").addClass("hide");
        }

        var eventClickFn;
        var viewChangeFn;

        @if (ViewBag.user.UserGroup == "INTER")
        {
            <text>
        viewChangeFn = function (view, element) {
            updateCalendar(view, false);
        };
        eventClickFn = function (event, jsEvent, view) {
            var id = event.id;
            // Get interview from API
            $.ajax({
                url: baseURL + "/api/Interview/Get/" + id,
                type: "Get",
                success: function (data) {
                    // Display information in sidebar
                    var date = moment(data.Date);
                    var startDate = moment(data.StartTime);
                    var endDate = moment(data.EndTime);

                    $("#interview-info-date").text(date.format("MMM Do, YYYY"));
                    $("#interview-info-start").text(startDate.format("HH:mm"));
                    $("#interview-info-end").text(endDate.format("HH:mm"));
                    $("#interview-info-location").text(data.Location);
                    $("#interview-info-interviewers").text(data.InterviewerUser.LoginID);
                    $("#interview-info-candidates").text(data.BioData.FName + " " + data.BioData.LName);
                    var link = "@Url.Action("Edit", "Interviews", new { id = "__id__" })";
                    link = link.replace("__id__", data.InterviewID);
                    $("#edit-interview").attr("href", link);

                    // Show sidebar at end
                    $("#interview-info").removeClass("hide");
                },
                error: function (data) {
                }
            });
        };
        </text>
        }
        else
        {
            <text>
        viewChangeFn = function (view, element) {
            updateCalendar(view, true);
        };
        eventClickFn = function (event, jsEvent, view) {
            var eventStr = "" + event.id;
            var a = eventStr.split(",");
            var interviews = interviewMapper[a[0]][a[1]];
            // Clear out interviews in interview-list
            $("#interview-list .panel-body").empty();
            // Re-populate
            for (var i = 0; i < interviews.length; i++) {
                var interview = interviews[i];
                var date = moment(interview.Date);
                var startTime = moment(interview.StartTime);
                var endTime = moment(interview.EndTime);
                var link = "@Url.Action("Edit", "Interviews", new { id = "__id__" })";
                link = link.replace("__id__", interview.InterviewID);
                $("#edit-interview").attr("href", link);
                var statusClass = interview.Status.toLowerCase();
                var status = interview.Status;
                if (interview.CurrentlyEditingID != null) {
                    statusClass = "editing";
                    status = "Being Edited"
                }
                $("#interview-list .panel-body").append(
                    '<div class="well well-small row-fluid">' +
                        '<div class="span10">' +
                            '<div>Candidate: ' + interview.BioData.FName + ' ' + interview.BioData.LName + '</div>' +
                            '<div>Interviewer: ' + interview.InterviewerUser.LoginID + '</div>' +
                            '<div>Date/Time: ' + date.format("M/D/YYYY") + ' ' + startTime.format("HH:mm") + '-' + endTime.format("HH:mm") + '</div>' +
                            '<div>Location: ' + interview.Location + '</div>' +
                            '<div>Status: <span class="' + statusClass + '">' + status + '</span></div>' +
                            '<div>Type: ' + interview.BioData.Sources.SourcesValue + '</div>' +
                        '</div>' +
                        '<div class="span2 text-center">' +
                            '<a class="button" type="button" href="' + link + '"><i class="fa fa-edit"></i></a>' +
                            '<button type="button" class="btn-ignore btn-danger"><i class="fa fa-times-circle"></i></button>' +
                        '</div>' +
                    '</div>'
                );
            }

            // Re-init buttons
            $("#interview-list .panel-body a.button").button();
        };
        </text>
        }

        $(document).ready(function () {

            // Init dialog for fetching interview
            $("#dialog").dialog({
                autoOpen: false,
                modal: true,
                dialogClass: "no-close"
            });

            $("#dialog-confirm").dialog({
                autoOpen: false
            });

            $("#calendar").fullCalendar({
                header: {
                    left: "prev,next today",
                    center: "title",
                    right: "month,agendaWeek,agendaDay"
                },
                weekMode: "liquid",
                buttonText: {
                    today: "Today",
                    month: "Month",
                    week: "Week",
                    day: "Day"
                },
                selectable: true,
                eventColor: "#17599D",
                viewRender: viewChangeFn,
                dayClick: function (date, allDay, jsEvent, view) {
                    var myDate = $("#calendar").fullCalendar('getDate');
                    $("#date-holder").datepicker("setDate", date);
                    $("#date-holder").trigger("change");
                },
                eventClick: eventClickFn
            });

            $("#submit-quals").click(function () {
                updateInterviewers();
            });

            $("#schedule-interview").click(function () {
                // Hide errors
                $("#interview-errors").addClass("hide");
                // Disable all checkboxes
                $("#interview-form").find(":radio, :checkbox").attr("disabled", true);
                // Change date hour to 12pm
                var date = new Date($("#date-holder").val());
                date.setHours(12);
                $("#Date").val(date.toISOString());
                // Get form data
                var interview = $("#interview-form").serialize();
                // Test
                $.ajax({
                    url: baseURL + "/api/Interview/Test?" + interview,
                    type: "Post",
                    success: function (data) {
                        // Submit interview
                        $.ajax({
                            url: baseURL + "/api/Interview/Post?" + interview,
                            type: "Post",
                            success: function (data) {
                                // Update calendar
                                updateCalendar($("#calendar").fullCalendar("getView"));
                                // Re-enable checkboxes
                                $("#interview-form").find(":radio, :checkbox").removeAttr("disabled");
                                clearForm();
                            },
                            error: function (data) {
                                // Re-enable checkboxes
                                $("#interview-form").find(":radio, :checkbox").removeAttr("disabled");
                            }
                        });
                    },
                    error: function (data) {
                        // Show errors
                        var errors = "";
                        var response = $.parseJSON(data.responseText).ModelState;
                        $.each(response, function (key, value) {
                            for (var i = 0; i < value.length; i++) {
                                errors += value[i] + "<br/>";
                            }
                        });
                        $("#interview-errors > p").html(errors);
                        $("#interview-errors").removeClass("hide");
                        // Re-enable checkboxes
                        $("#interview-form").find(":radio, :checkbox").removeAttr("disabled");
                    }
                });
            });

            $("#createInterview").click(function () {
                $("#showCreate").slideToggle();
            });

            $("#cancelInterview").click(function () {
                $("#showCreate").slideToggle();
                clearForm();
            });

            $("#hide-interview-info").click(function () {
                $("#interview-info").addClass("hide");
            });

            $("#date-holder").datepicker();

            $("#BioDataID").select2({
                placeholder: "Choose Candidate",
                matcher: function (term, text, opt) {
                    return text.toUpperCase().indexOf(term.toUpperCase()) >= 0
                        || opt.attr("data-alt").toUpperCase().indexOf(term.toUpperCase()) >= 0;
                },
                dropdownCssClass: "expand"
            });

            $("#InterviewerID").select2(
                {
                    placeholder: "Choose Interviewer",
                });

            $("#start-holder").on("change", function () {
                var hour = $(this).val().split(":")[0];
                if (hour.length < 2) {
                    hour = "0" + hour;
                }
                var min = $(this).val().split(":")[1];
                if (min == "00") {
                    min = "0";
                }
                // Change StartTime value
                var time;
                if ($("#StartTime").val() == "") {
                    time = new Date();
                } else {
                    time = new Date($("#StartTime").val());
                }
                time.setHours(hour);
                time.setMinutes(min);
                $("#StartTime").val(time.toISOString());
                // Change Duration
                if ($("#EndTime").val() != "") {
                    var start = moment($("#StartTime").val());
                    var end = moment($("#EndTime").val());
                    var hoursPassed = end.hours() - start.hours();
                    var minsPassed = end.minutes() - start.minutes();
                    if (minsPassed < 0) {
                        minsPassed += 60;
                        hoursPassed -= 1;
                    }
                    var duration = hoursPassed * 60 + minsPassed;
                    $("#Duration").val(duration);
                }
            });

            $("#end-holder").on("change", function () {
                var hour = $(this).val().split(":")[0];
                if (hour.length < 2) {
                    hour = "0" + hour;
                }
                var min = $(this).val().split(":")[1];
                if (min == "00") {
                    min = "0";
                }
                // Change EndTime value
                var time;
                if ($("#EndTime").val() == "") {
                    time = new Date();
                } else {
                    time = new Date($("#EndTime").val());
                }
                time.setHours(hour);
                time.setMinutes(min);
                $("#EndTime").val(time.toISOString());
                // Change Duration
                if ($("#StartTime").val() != "") {
                    var start = moment($("#StartTime").val());
                    var end = moment($("#EndTime").val());
                    var hoursPassed = end.hours() - start.hours();
                    var minsPassed = end.minutes() - start.minutes();
                    if (minsPassed < 0) {
                        minsPassed += 60;
                        hoursPassed -= 1;
                    }
                    var duration = hoursPassed * 60 + minsPassed;
                    $("#Duration").val(duration);
                }
            });


            $("#date-holder").on("change", function () {
                //alert("click");
                var date = $(this).datepicker("getDate");
                // Change StartTime
                if ($("#StartTime").val() == "") {
                    $("#StartTime").val(date.toISOString());
                } else {
                    var date = new Date(date.toISOString());
                    var time = new Date($("#StartTime").val());
                    date.setHours(time.getHours());
                    date.setMinutes(time.getMinutes());
                    $("#StartTime").val(date.toISOString());
                }
                // Change EndTime
                if ($("#EndTime").val() == "") {
                    $("#EndTime").val(date.toISOString());
                } else {
                    var date = new Date(date.toISOString());
                    var time = new Date($("#EndTime").val());
                    date.setHours(time.getHours());
                    date.setMinutes(time.getMinutes());
                    $("#EndTime").val(date.toISOString());
                }
            });

            var gotoString = "<div>" +
                "<select id='goto-month'>" +
                    "<option value='0'>Jan</option>" +
                    "<option value='1'>Feb</option>" +
                    "<option value='2'>Mar</option>" +
                    "<option value='3'>Apr</option>" +
                    "<option value='4'>May</option>" +
                    "<option value='5'>Jun</option>" +
                    "<option value='6'>Jul</option>" +
                    "<option value='7'>Aug</option>" +
                    "<option value='8'>Sep</option>" +
                    "<option value='9'>Oct</option>" +
                    "<option value='10'>Nov</option>" +
                    "<option value='11'>Dec</option>" +
                "</select>" +
                "<select id='goto-day'>";
            for (var i = 1; i <= 31; i++) {
                gotoString += "<option value='" + i + "'>" + i + "</option>";
            }
            gotoString += "" +
                "</select>" +
                "<input id='goto-year' type='text' style='width: 50px;'/>" +
                "<button type='button' id='goto-calendar' class='btn-ignore btn-success btn-mini'>Go</button>" +
            "</div>";

            $(".fc-header-center").append(gotoString);

            $(document).on("click", "#goto-calendar", function () {
                var day = $("#goto-day").val();
                var month = $("#goto-month").val();
                var year = $("#goto-year").val();
                if (day != "" && month != "" && year != "") {
                    $("#calendar").fullCalendar("gotoDate", year, month, day);
                }
            });

            // Delete interview
            $(document).on("click", ".delete-interview", function () {
                var id = $(this).data("id");
                showDialog("Confirm Deletion", "Are you sure you want to delete this interview?", false, function () {
                    // Delete interview
                    $.ajax({
                        url: baseURL + "/api/Interview/Delete/" + id,
                        type: "Delete",
                        success: function (data) {
                            // Refresh page
                            window.location.href = "@Url.Action("Index", "Calendar")";
                        },
                        error: function (data) {
                        }
                    });
                });
            });

            // Update calendar every minute
            setInterval(function () {
                updateCalendar($("#calendar").fullCalendar("getView"), false);
            }, 60000);

        });
    </script>
}